devtools::document()
devtools::build()
devtools::install()
rm(list=ls())
library(contdid)
# devtools::dependencies("contdid")
ls("package:contdid")
# Run some initial tests
some_Data <- data.frame(
treatment = c(0, 1, 0, 1, 0, 1),
outcome = c(1, 2, 3, 4, 5, 6)
)
# For example, if you have a function npiv_regression, try running it with a small dataset
result <- npiv_regression(data = some_Data, treatment_col = "treatment", outcome_col = "outcome")
# devtools::dependencies("contdid")
ls("package:contdid")
system("R CMD SHLIB src/*.cpp")
Rcpp::compileAttributes()
devtools::document()
devtools::build()
devtools::check()
devtools::install()
rm(list=ls())
library(contdid)
# devtools::dependencies("contdid")
ls("package:contdid")
# Run some initial tests
some_Data <- data.frame(
treatment = c(0, 1, 0, 1, 0, 1),
outcome = c(1, 2, 3, 4, 5, 6)
)
# For example, if you have a function npiv_regression, try running it with a small dataset
result <- npiv_regression(data = some_Data, treatment_col = "treatment", outcome_col = "outcome")
devtools::document()
remove.packages("contdid")
devtools::clean_all()
devtools::document()
remove.packages("contdid")
devtools::document()
devtools::document()
devtools::build(vignettes = FALSE)
devtools::install()
rm(list=ls())
library(contdid)
# devtools::dependencies("contdid")
ls("package:contdid")
# Run some initial tests
some_Data <- data.frame(
treatment = c(0, 1, 0, 1, 0, 1),
outcome = c(1, 2, 3, 4, 5, 6)
)
# For example, if you have a function npiv_regression, try running it with a small dataset
result <- npiv_regression(data = some_Data, treatment_col = "treatment", outcome_col = "outcome")
library(devtools)
load_all()
if (!requireNamespace("fusen", quietly = TRUE)) {
install.packages("fusen")
}
library(fusen)
fusen::inflate_watch()
remotes::install_github(repo = "kennedymwavu/rmon")
usethis::use_build_ignore("dev")
source("dev/dev.R")
rm(list=ls())
library(contdid)
# devtools::dependencies("contdid")
ls("package:contdid")
# Run some initial tests
some_Data <- data.frame(
treatment = c(0, 1, 0, 1, 0, 1),
outcome = c(1, 2, 3, 4, 5, 6)
)
# For example, if you have a function npiv_regression, try running it with a small dataset
result <- npiv_regression(data = some_Data, treatment_col = "treatment", outcome_col = "outcome")
rm(list=ls())
library(contdid)
# devtools::dependencies("contdid")
ls("package:contdid")
# Run some initial tests
some_Data <- data.frame(
treatment = c(0, 1, 0, 1, 0, 1),
outcome = c(1, 2, 3, 4, 5, 6)
)
# For example, if you have a function npiv_regression, try running it with a small dataset
result <- npiv_regression(data = some_Data, treatment_col = "treatment", outcome_col = "outcome")
source("dev/dev.R")
source("dev/dev.R")
setwd("~/Documents/uni/master-dissertation/contdid")
source("dev/dev.R")
source("~/Documents/uni/master-dissertation/contdid/dev/dev.R")
source("~/Documents/uni/master-dissertation/contdid/dev/dev.R")
source("~/Documents/uni/master-dissertation/contdid/dev/dev.R")
^dev$
source("~/Documents/uni/master-dissertation/contdid/dev/dev.R")
rmon::monitor(
dir = c("R", "inst", "man"),
file = "/home/oddish3/Documents/uni/master-dissertation/contdid/dev/dev_reload.R",
ext = c("R", "Rd", "cpp"),
delay = 2
)
library(devtools)
library(rmon)
rmon::monitor(
dir = c("R", "inst", "man"),
file = "/home/oddish3/Documents/uni/master-dissertation/contdid/dev/dev_reload.R",
ext = c("R", "Rd", "cpp"),
delay = 2
)
rmon::monitor(
# dir = c("R", "inst", "man"),
file = "/home/oddish3/Documents/uni/master-dissertation/contdid/dev/dev_reload.R",
ext = c("R", "Rd", "cpp"),
delay = 2
)
rmon::monitor(
# dir = c("R", "inst", "man"),
file = "dev/dev_reload.R",
ext = c("R", "Rd", "cpp"),
delay = 2
)
# Remove the dev directory if it exists
if (dir.exists("dev")) unlink("dev", recursive = TRUE)
# Remove dev entries from .Rbuildignore if they exist
if (file.exists(".Rbuildignore")) {
build_ignore <- readLines(".Rbuildignore")
build_ignore <- build_ignore[!grepl("^dev$", build_ignore)]
writeLines(build_ignore, ".Rbuildignore")
}
# Create dev directory
dir.create("dev")
# Create dev.R
writeLines('
library(devtools)
library(rmon)
rmon::monitor(
dir = c("R", "inst", "man"),
file = "dev/dev_reload.R",
ext = c("R", "Rd"),
delay = 2
)
', "dev/dev.R")
# Create dev_reload.R
writeLines('
devtools::load_all()
print("Package reloaded!")
', "dev/dev_reload.R")
source("dev/dev.R")
getwd()
source("~/Documents/uni/master-dissertation/contdid/dev/dev.R")
source("dev/dev.R")
list.files(recursive = TRUE, all.files = TRUE)
library(devtools)
library(rmon)
rmon::monitor(
dir = c("R", "inst", "man"),
file = "dev/dev_reload.R",
ext = c("R", "Rd"),
delay = 2
)
rmon::monitor(
# dir = c("R", "inst", "man"),
file = "dev/dev_reload.R",
ext = c("R", "Rd"),
delay = 2
)
library(devtools)
library(rmon)
rmon::monitor(
# dir = c("R", "inst", "man"),
file = "dev/dev_reload.R",
ext = c("R", "Rd"),
# delay = 2
)
rmon::monitor(
# dir = c("R", "inst", "man"),
file = "dev/dev_reload.R",
ext = c("R", "Rd"),
# delay = 2
)
rmon::monitor(
dir = ".",
# dir = c("R", "inst", "man"),
file = "dev/dev_reload.R",
ext = c("R", "Rd"),
# delay = 2
)
rmon::monitor(
dir = ".",
# dir = c("R", "inst", "man"),
file = "dev/dev_reload.R",
ext = c("R", "Rd"),
# delay = 2
)
devtools::document()
devtools::build(vignettes = FALSE)
devtools::install()
rm(list=ls())
library(contdid)
# devtools::dependencies("contdid")
ls("package:contdid")
# Run some initial tests
some_Data <- data.frame(
treatment = c(0, 1, 0, 1, 0, 1),
outcome = c(1, 2, 3, 4, 5, 6)
)
# For example, if you have a function npiv_regression, try running it with a small dataset
result <- npiv_regression(data = some_Data, treatment_col = "treatment", outcome_col = "outcome")
#' Update and Reinstall Package
#'
#' This function automates the process of updating and reinstalling the package during development.
#'
#' @param pkg The name of the package
#' @param restart Whether to restart the R session after reinstalling (default: FALSE)
#'
#' @export
update_package <- function(pkg = "contdid", restart = FALSE) {
if (pkg %in% (.packages())) {
detach(paste0("package:", pkg), unload = TRUE, character.only = TRUE)
}
remove.packages(pkg)
Rcpp::compileAttributes()
devtools::clean_dll()
devtools::build()
devtools::install()
if (restart) {
.rs.restartR()
} else {
library(pkg, character.only = TRUE)
}
cat(paste0("Package '", pkg, "' has been updated and reinstalled.\n"))
}
rm(list=ls())
update_package("contdid")
source("~/Documents/uni/master-dissertation/contdid/R/utils.R")
rm(list=ls())
source("~/Documents/uni/master-dissertation/contdid/R/utils.R")
update_package("contdid")
library(contdid)
source("~/Documents/uni/master-dissertation/contdid/R/utils.R")
rm(list=ls())
source("~/Documents/uni/master-dissertation/contdid/R/utils.R")
update_package("contdid")
library(contdid)
detach("package:contdid", unload = TRUE)
remove.packages("contdid")
Rcpp::compileAttributes()
devtools::clean_dll()
devtools::build()
devtools::install()
library(contdid)
# devtools::dependencies("contdid")
ls("package:contdid")
# Run some initial tests
some_Data <- data.frame(
treatment = c(0, 1, 0, 1, 0, 1),
outcome = c(1, 2, 3, 4, 5, 6)
)
# For example, if you have a function npiv_regression, try running it with a small dataset
result <- npiv_regression(data = some_Data, treatment_col = "treatment", outcome_col = "outcome")
max(abs(tnum/tden))
# For example, if you have a function npiv_regression, try running it with a small dataset
result <- npiv_regression(data = some_Data, treatment_col = "treatment", outcome_col = "outcome")
# Run some initial tests
some_Data <- data.frame(
treatment = rtruncnorm(100, a = 0, b = 1, mean = 0.5, sd = 0.1),
outcome = rnorm(100, mean = 0.5, sd = 0.1)
)
# For example, if you have a function npiv_regression, try running it with a small dataset
result <- npiv_regression(data = some_Data, treatment_col = "treatment", outcome_col = "outcome")
rm(list=ls())
# source("~/Documents/uni/master-dissertation/contdid/R/utils.R")
devtools::load_all()
# Run some initial tests
some_Data <- data.frame(
treatment = rtruncnorm(100, a = 0, b = 1, mean = 0.5, sd = 0.1),
outcome = rnorm(100, mean = 0.5, sd = 0.1)
)
# For example, if you have a function npiv_regression, try running it with a small dataset
result <- npiv_regression(data = some_Data, treatment_col = "treatment", outcome_col = "outcome")
library(truncnorm)
# Run some initial tests
some_Data <- data.frame(
treatment = rtruncnorm(100, a = 0, b = 1, mean = 0.5, sd = 0.1),
outcome = rnorm(100, mean = 0.5, sd = 0.1)
)
# For example, if you have a function npiv_regression, try running it with a small dataset
result <- npiv_regression(data = some_Data, treatment_col = "treatment", outcome_col = "outcome")
devtools::load_all()
# For example, if you have a function npiv_regression, try running it with a small dataset
result <- npiv_regression(data = some_Data, treatment_col = "treatment", outcome_col = "outcome")
devtools::load_all()
# For example, if you have a function npiv_regression, try running it with a small dataset
result <- npiv_regression(data = some_Data, treatment_col = "treatment", outcome_col = "outcome")
rm(list=ls())
# devtools::load_all()
# update_package("contdid")
library(contdid)
library(fixest)
library(truncnorm)
library(binscatteR)
# Set seed for reproducibility
set.seed(1234)
# Simulation parameters
n_total <- 1000  # Total number of units (schools/hospitals)
n_periods <- 1   # Number of time periods (simplified to 1 for cross-sectional data)
effect_size <- 1 # Effect size
prop_treated <- 0.9 # Proportion of treated units
# Generate dataset function (from the second simulation)
generate_dataset <- function(n_total, prop_treated) {
# Generate a binary treatment indicator
treatment <- rbinom(n_total, 1, prop_treated)
# Initialize dose with zeros for all units
dose <- rep(0, n_total)
# For the treated units, generate dose from a truncated normal distribution
dose[treatment == 1] <- rtruncnorm(sum(treatment), a = 0, b = 1, mean = 0.5, sd = 0.16)
# Calculate the dependent variable dy using the quadratic equation
dy <- -4 * (dose - 0.5)^2 + 1
dy[treatment == 0] <- rnorm(sum(treatment == 0), mean = 0.004687925, sd = 0.1013251)
# Create DataFrame
tibble(
id = 1:n_total,
dy = dy,
dose = dose,
treated = treatment
)
}
# Generate the dataset
data <- generate_dataset(n_total, prop_treated)
rm(list=ls())
# source("~/Documents/uni/master-dissertation/contdid/R/utils.R")
devtools::load_all()
# update_package("contdid")
library(contdid)
# devtools::dependencies("contdid")
ls("package:contdid")
library(tidyverse)
library(fixest)
library(truncnorm)
library(binscatteR)
# Set seed for reproducibility
set.seed(1234)
# Simulation parameters
n_total <- 1000  # Total number of units (schools/hospitals)
n_periods <- 1   # Number of time periods (simplified to 1 for cross-sectional data)
effect_size <- 1 # Effect size
prop_treated <- 0.9 # Proportion of treated units
# Generate dataset function (from the second simulation)
generate_dataset <- function(n_total, prop_treated) {
# Generate a binary treatment indicator
treatment <- rbinom(n_total, 1, prop_treated)
# Initialize dose with zeros for all units
dose <- rep(0, n_total)
# For the treated units, generate dose from a truncated normal distribution
dose[treatment == 1] <- rtruncnorm(sum(treatment), a = 0, b = 1, mean = 0.5, sd = 0.16)
# Calculate the dependent variable dy using the quadratic equation
dy <- -4 * (dose - 0.5)^2 + 1
dy[treatment == 0] <- rnorm(sum(treatment == 0), mean = 0.004687925, sd = 0.1013251)
# Create DataFrame
tibble(
id = 1:n_total,
dy = dy,
dose = dose,
treated = treatment
)
}
# Generate the dataset
data <- generate_dataset(n_total, prop_treated)
result <- npiv_regression(data = data, treatment_col = "dose", outcome_col = "dy")
rm(list=ls())
# source("~/Documents/uni/master-dissertation/contdid/R/utils.R")
devtools::load_all()
# update_package("contdid")
library(contdid)
# devtools::dependencies("contdid")
ls("package:contdid")
library(tidyverse)
library(fixest)
library(truncnorm)
library(binscatteR)
# Set seed for reproducibility
set.seed(1234)
# Simulation parameters
n_total <- 1000  # Total number of units (schools/hospitals)
n_periods <- 1   # Number of time periods (simplified to 1 for cross-sectional data)
effect_size <- 1 # Effect size
prop_treated <- 0.9 # Proportion of treated units
# Generate dataset function (from the second simulation)
generate_dataset <- function(n_total, prop_treated) {
# Generate a binary treatment indicator
treatment <- rbinom(n_total, 1, prop_treated)
# Initialize dose with zeros for all units
dose <- rep(0, n_total)
# For the treated units, generate dose from a truncated normal distribution
dose[treatment == 1] <- rtruncnorm(sum(treatment), a = 0, b = 1, mean = 0.5, sd = 0.16)
# Calculate the dependent variable dy using the quadratic equation
dy <- -4 * (dose - 0.5)^2 + 1
dy[treatment == 0] <- rnorm(sum(treatment == 0), mean = 0.004687925, sd = 0.1013251)
# Create DataFrame
tibble(
id = 1:n_total,
dy = dy,
dose = dose,
treated = treatment
)
}
# Generate the dataset
data <- generate_dataset(n_total, prop_treated)
# Estimate effects using npiv_regression
# results <- npiv_regression(
#   data = data,
#   treatment_col = "dose",
#   outcome_col = "dy",
#   id_col = "id",
#   sourceCpp_path = "~/Documents/uni/master-dissertation/code-cont/chen/",
#   alpha = c(0.05)
# )
result <- npiv_regression(data = data, treatment_col = "dose", outcome_col = "dy")
View(result)
devtools::document()
devtools::test()
devtools::check()
devtools::check()
devtools::build()
# 5. Clean up
devtools::clean_vignettes()
devtools::clean_vignettes()
devtools::clean_dll()
devtools::document()
devtools::check()
usethis::use_git_ignore(c(".Rproj.user", ".Rhistory", ".RData", ".Ruserdata"))
