devtools::check()
devtools::build()
devtools::load_all()
devtools::check()
devtools::test()
devtools::test()
library(testthat)
library(readr)
library(dplyr)
# Helper function to load CSV files
load_csv_files <- function(directory) {
csv_files <- list.files(directory, pattern = "\\.csv$", full.names = TRUE)
data_list <- list()
for (file in csv_files) {
var_name <- tools::file_path_sans_ext(basename(file))
data_list[[var_name]] <- read_csv(file)
}
return(data_list)
}
# Test function
test_matlab_equality <- function(r_result, matlab_data, tolerance = 1e-6) {
# List of variables to compare
variables_to_compare <- c("x", "y", "Xx", "hhat", "dhat", "ACR_estimate")
for (var in variables_to_compare) {
if (var %in% names(r_result) && var %in% names(matlab_data)) {
r_value <- r_result[[var]]
matlab_value <- matlab_data[[var]][[1]]  # Assuming MATLAB data is in the first column
# Check if the lengths are the same
expect_equal(length(r_value), length(matlab_value),
info = paste("Length mismatch for variable:", var))
# Check if the values are approximately equal
expect_equal(r_value, matlab_value, tolerance = tolerance,
info = paste("Value mismatch for variable:", var))
} else {
warning(paste("Variable", var, "not found in both R and MATLAB results"))
}
}
}
# Load MATLAB CSV files
matlab_data <- load_csv_files("/home/oddish3/Documents/M_folder/CCK-OG/CCK/script")
View(matlab_data)
str(matlab_data)
# Run your R function
data <- read.csv("/home/oddish3/Downloads/medicare1.csv")
r_result <- npiv_regression(data, "dose", "dy")
r_result <- npiv_regression(data, "medicare_share_1983", "d_capital_labor_ratio")
r_result[[var]]
names(r_result)
names(matlab_data)
library(testthat)
library(readr)
library(dplyr)
library(purrr)
# Helper function to load CSV files
load_csv_files <- function(directory) {
csv_files <- list.files(directory, pattern = "\\.csv$", full.names = TRUE)
if (length(csv_files) == 0) {
stop("No CSV files found in the specified directory")
}
data_list <- map(csv_files, ~{
var_name <- tools::file_path_sans_ext(basename(.x))
var_name <- sub("^123_", "", var_name)  # Remove "123_" prefix
data <- read_csv(.x, col_types = cols())
if (ncol(data) == 1) {
setNames(list(as.numeric(data[[1]])), var_name)
} else {
setNames(list(data), var_name)
}
}) %>% flatten()
return(data_list)
}
# Test function
test_matlab_equality <- function(r_result, matlab_data, tolerance = 1e-6) {
common_vars <- intersect(names(r_result), names(matlab_data))
for (var in common_vars) {
r_value <- r_result[[var]]
matlab_value <- matlab_data[[var]]
# Convert to vector if it's a single-column data frame
if (is.data.frame(matlab_value) && ncol(matlab_value) == 1) {
matlab_value <- matlab_value[[1]]
}
# Check if the lengths are the same
expect_equal(length(r_value), length(matlab_value),
info = paste("Length mismatch for variable:", var))
# Check if the values are approximately equal
expect_equal(r_value, matlab_value, tolerance = tolerance,
info = paste("Value mismatch for variable:", var))
}
}
# Main test
skip_if_not(file.exists("/home/oddish3/Documents/M_folder/CCK-OG/CCK/script"),
"MATLAB data directory not found")
skip_if_not(file.exists("/home/oddish3/Downloads/medicare1.csv"),
"Medicare data file not found")
# Load MATLAB CSV files
matlab_data <- tryCatch({
load_csv_files("/home/oddish3/Documents/M_folder/CCK-OG/CCK/script")
}, error = function(e) {
skip(paste("Error loading MATLAB data:", e$message))
})
# Load and sample R data
data <- read.csv("/home/oddish3/Downloads/medicare1.csv")
# Run your R function
r_result <- tryCatch({
npiv_regression(data, "dose", "dy")
}, error = function(e) {
skip(paste("Error in npiv_regression:", e$message))
})
npiv_regression(data, "medicare_share_1983", "d_capital_labor_ratio")
# Run your R function
r_result <- tryCatch({
npiv_regression(data, "medicare_share_1983", "d_capital_labor_ratio")
}, error = function(e) {
skip(paste("Error in npiv_regression:", e$message))
})
# Compare results
test_matlab_equality(r_result, matlab_data)
# Test function
test_matlab_equality <- function(r_result, matlab_data, tolerance = 1e-6) {
browser()
common_vars <- intersect(names(r_result), names(matlab_data))
for (var in common_vars) {
r_value <- r_result[[var]]
matlab_value <- matlab_data[[var]]
# Convert to vector if it's a single-column data frame
if (is.data.frame(matlab_value) && ncol(matlab_value) == 1) {
matlab_value <- matlab_value[[1]]
}
# Check if the lengths are the same
expect_equal(length(r_value), length(matlab_value),
info = paste("Length mismatch for variable:", var))
# Check if the values are approximately equal
expect_equal(r_value, matlab_value, tolerance = tolerance,
info = paste("Value mismatch for variable:", var))
}
}
# Compare results
test_matlab_equality(r_result, matlab_data)
force(r_result)
force(matlab_data)
# Compare results
test_matlab_equality(r_result, matlab_data)
force(r_result)
force(matlab_data)
View(matlab_data)
# Helper function to load CSV files
load_csv_files <- function(directory) {
csv_files <- list.files(directory, pattern = "\\.csv$", full.names = TRUE)
if (length(csv_files) == 0) {
stop("No CSV files found in the specified directory")
}
data_list <- map(csv_files, ~{
var_name <- tools::file_path_sans_ext(basename(.x))
var_name <- sub("^123_", "", var_name)  # Remove "123_" prefix
data <- read_csv(.x, col_types = cols(), col_names = FALSE)
if (ncol(data) == 1) {
setNames(list(as.numeric(data[[1]])), var_name)
} else {
setNames(list(data), var_name)
}
}) %>% flatten()
return(data_list)
}
# Test function
test_matlab_equality <- function(r_result, matlab_data, tolerance = 1e-6) {
browser()
common_vars <- intersect(names(r_result), names(matlab_data))
for (var in common_vars) {
r_value <- r_result[[var]]
matlab_value <- matlab_data[[var]]
# Convert to vector if it's a single-column data frame
if (is.data.frame(matlab_value) && ncol(matlab_value) == 1) {
matlab_value <- matlab_value[[1]]
}
# Check if the lengths are the same
expect_equal(length(r_value), length(matlab_value),
info = paste("Length mismatch for variable:", var))
# Check if the values are approximately equal
expect_equal(r_value, matlab_value, tolerance = tolerance,
info = paste("Value mismatch for variable:", var))
}
}
skip_if_not(file.exists("/home/oddish3/Documents/M_folder/CCK-OG/CCK/script"),
"MATLAB data directory not found")
skip_if_not(file.exists("/home/oddish3/Downloads/medicare1.csv"),
"Medicare data file not found")
# Load MATLAB CSV files
matlab_data <- tryCatch({
load_csv_files("/home/oddish3/Documents/M_folder/CCK-OG/CCK/script")
}, error = function(e) {
skip(paste("Error loading MATLAB data:", e$message))
})
# Load and sample R data
data <- read.csv("/home/oddish3/Downloads/medicare1.csv")
# Run your R function
r_result <- tryCatch({
npiv_regression(data, "medicare_share_1983", "d_capital_labor_ratio")
}, error = function(e) {
skip(paste("Error in npiv_regression:", e$message))
})
# Compare results
test_matlab_equality(r_result, matlab_data)
# Test function
test_matlab_equality <- function(r_result, matlab_data, tolerance = 1e-6) {
# browser()
common_vars <- intersect(names(r_result), names(matlab_data))
for (var in common_vars) {
r_value <- r_result[[var]]
matlab_value <- matlab_data[[var]]
# Convert to vector if it's a single-column data frame
if (is.data.frame(matlab_value) && ncol(matlab_value) == 1) {
matlab_value <- matlab_value[[1]]
}
# Check if the lengths are the same
expect_equal(length(r_value), length(matlab_value),
info = paste("Length mismatch for variable:", var))
# Check if the values are approximately equal
expect_equal(r_value, matlab_value, tolerance = tolerance,
info = paste("Value mismatch for variable:", var))
}
}
# Compare results
test_matlab_equality(r_result, matlab_data)
devtools::load_all()
# Run your R function
r_result <- tryCatch({
npiv_regression(data, "medicare_share_1983", "d_capital_labor_ratio")
}, error = function(e) {
skip(paste("Error in npiv_regression:", e$message))
})
# Compare results
test_matlab_equality(r_result, matlab_data)
# Test function
test_matlab_equality <- function(r_result, matlab_data, tolerance = 1e-4) {
# browser()
common_vars <- intersect(names(r_result), names(matlab_data))
for (var in common_vars) {
r_value <- r_result[[var]]
matlab_value <- matlab_data[[var]]
# Convert to vector if it's a single-column data frame
if (is.data.frame(matlab_value) && ncol(matlab_value) == 1) {
matlab_value <- matlab_value[[1]]
}
# Check if the lengths are the same
expect_equal(length(r_value), length(matlab_value),
info = paste("Length mismatch for variable:", var))
# Check if the values are approximately equal
expect_equal(r_value, matlab_value, tolerance = tolerance,
info = paste("Value mismatch for variable:", var))
}
}
# Compare results
test_matlab_equality(r_result, matlab_data)
# Compare results
test_matlab_equality(r_result, matlab_data)
Q
# Compare results
test_matlab_equality(r_result, matlab_data)
# Test function
test_matlab_equality <- function(r_result, matlab_data, tolerance = 1e-4) {
browser()
common_vars <- intersect(names(r_result), names(matlab_data))
for (var in common_vars) {
r_value <- r_result[[var]]
matlab_value <- matlab_data[[var]]
# Convert to vector if it's a single-column data frame
if (is.data.frame(matlab_value) && ncol(matlab_value) == 1) {
matlab_value <- matlab_value[[1]]
}
# Check if the lengths are the same
expect_equal(length(r_value), length(matlab_value),
info = paste("Length mismatch for variable:", var))
# Check if the values are approximately equal
expect_equal(r_value, matlab_value, tolerance = tolerance,
info = paste("Value mismatch for variable:", var))
}
}
# Compare results
test_matlab_equality(r_result, matlab_data)
# Convert to vector if it's a single-column data frame
if (is.data.frame(matlab_value) && ncol(matlab_value) == 1) {
matlab_value <- matlab_value[[1]]
}
# Check if the lengths are the same
expect_equal(length(r_value), length(matlab_value),
info = paste("Length mismatch for variable:", var))
# Check if the values are approximately equal
expect_equal(r_value, matlab_value, tolerance = tolerance,
info = paste("Value mismatch for variable:", var))
for (var in common_vars) {
r_value <- r_result[[var]]
matlab_value <- matlab_data[[var]]
# Convert to vector if it's a single-column data frame
if (is.data.frame(matlab_value) && ncol(matlab_value) == 1) {
matlab_value <- matlab_value[[1]]
}
# Check if the lengths are the same
expect_equal(length(r_value), length(matlab_value),
info = paste("Length mismatch for variable:", var))
# Check if the values are approximately equal
expect_equal(r_value, matlab_value, tolerance = tolerance,
info = paste("Value mismatch for variable:", var))
}
# Test function
test_matlab_equality <- function(r_result, matlab_data, tolerance = 1e-4) {
browser()
common_vars <- intersect(names(r_result), names(matlab_data))
for (var in common_vars) {
r_value <- r_result[[var]]
matlab_value <- matlab_data[[var]]
# Convert to vector if it's a single-column data frame
if (is.data.frame(matlab_value) && ncol(matlab_value) == 1) {
matlab_value <- matlab_value[[1]]
}
# Check if the lengths are the same
expect_equal(length(r_value), length(matlab_value),
info = paste("Length mismatch for variable:", var))
# Check if the values are approximately equal
expect_equal(r_value, matlab_value, tolerance = tolerance,
info = paste("Value mismatch for variable:", var))
}
}
# Main test
test_that("Short Test: R results match MATLAB results", {
skip_if_not(file.exists("/home/oddish3/Documents/M_folder/CCK-OG/CCK/script"),
"MATLAB data directory not found")
skip_if_not(file.exists("/home/oddish3/Downloads/medicare1.csv"),
"Medicare data file not found")
# Load MATLAB CSV files
matlab_data <- tryCatch({
load_csv_files("/home/oddish3/Documents/M_folder/CCK-OG/CCK/script")
}, error = function(e) {
skip(paste("Error loading MATLAB data:", e$message))
})
# Load and sample R data
data <- read.csv("/home/oddish3/Downloads/medicare1.csv")
# sampled_data <- data %>% sample_n(min(1000, nrow(data)))  # Sample 1000 rows or less if data is smaller
# Run your R function
r_result <- tryCatch({
npiv_regression(data, "medicare_share_1983", "d_capital_labor_ratio")
}, error = function(e) {
skip(paste("Error in npiv_regression:", e$message))
})
# Compare results
test_matlab_equality(r_result, matlab_data)
})
# Compare results
test_matlab_equality(r_result, matlab_data)
expect_equal(length(r_value), length(matlab_value),
info = paste("Length mismatch for variable:", var))
expect_equal(r_value, matlab_value, tolerance = tolerance,
info = paste("Value mismatch for variable:", var))
View(r_value)
str(r_value)
str(matlab_value)
View(r_value)
View(r_value)
dim(r_value)
dim(matlab_value)
r_value <- as.numeric(r_value)
# Check if the values are approximately equal
expect_equal(r_value, matlab_value, tolerance = tolerance,
info = paste("Value mismatch for variable:", var))
# Test function
test_matlab_equality <- function(r_result, matlab_data, tolerance = 1e-6) {
browser()
common_vars <- intersect(names(r_result), names(matlab_data))
for (var in common_vars) {
r_value <- r_result[[var]]
matlab_value <- matlab_data[[var]]
# Convert to vector if it's a single-column data frame
restructure_variable <- function(var) {
if (is.data.frame(var) && ncol(var) == 1) {
# If the variable is a data frame with 1 column, extract the vector
var <- var[[1]]
}
if (is.matrix(var) && ncol(var) == 1) {
# If the variable is a matrix with 1 column, convert to a vector
var <- as.numeric(var)
}
if (is.array(var) && length(dim(var)) == 2 && dim(var)[2] == 1) {
# If the variable is a 2D array with 1 column, convert to a vector
var <- as.numeric(var)
}
return(var)
}
# Restructure r_value and matlab_value
r_value <- restructure_variable(r_value)
matlab_value <- restructure_variable(matlab_value)
# Check if the lengths are the same
expect_equal(length(r_value), length(matlab_value),
info = paste("Length mismatch for variable:", var))
# Check if the values are approximately equal
expect_equal(r_value, matlab_value, tolerance = tolerance,
info = paste("Value mismatch for variable:", var))
}
}
# Compare results
test_matlab_equality(r_result, matlab_data)
# Test function
test_matlab_equality <- function(r_result, matlab_data, tolerance = 1e-6) {
# browser()
common_vars <- intersect(names(r_result), names(matlab_data))
for (var in common_vars) {
r_value <- r_result[[var]]
matlab_value <- matlab_data[[var]]
# Convert to vector if it's a single-column data frame
restructure_variable <- function(var) {
if (is.data.frame(var) && ncol(var) == 1) {
# If the variable is a data frame with 1 column, extract the vector
var <- var[[1]]
}
if (is.matrix(var) && ncol(var) == 1) {
# If the variable is a matrix with 1 column, convert to a vector
var <- as.numeric(var)
}
if (is.array(var) && length(dim(var)) == 2 && dim(var)[2] == 1) {
# If the variable is a 2D array with 1 column, convert to a vector
var <- as.numeric(var)
}
return(var)
}
# Restructure r_value and matlab_value
r_value <- restructure_variable(r_value)
matlab_value <- restructure_variable(matlab_value)
# Check if the lengths are the same
expect_equal(length(r_value), length(matlab_value),
info = paste("Length mismatch for variable:", var))
# Check if the values are approximately equal
expect_equal(r_value, matlab_value, tolerance = tolerance,
info = paste("Value mismatch for variable:", var))
}
}
# Compare results
test_matlab_equality(r_result, matlab_data)
# Test function
test_matlab_equality <- function(r_result, matlab_data, tolerance = 1e-4) {
# browser()
common_vars <- intersect(names(r_result), names(matlab_data))
for (var in common_vars) {
r_value <- r_result[[var]]
matlab_value <- matlab_data[[var]]
# Convert to vector if it's a single-column data frame
restructure_variable <- function(var) {
if (is.data.frame(var) && ncol(var) == 1) {
# If the variable is a data frame with 1 column, extract the vector
var <- var[[1]]
}
if (is.matrix(var) && ncol(var) == 1) {
# If the variable is a matrix with 1 column, convert to a vector
var <- as.numeric(var)
}
if (is.array(var) && length(dim(var)) == 2 && dim(var)[2] == 1) {
# If the variable is a 2D array with 1 column, convert to a vector
var <- as.numeric(var)
}
return(var)
}
# Restructure r_value and matlab_value
r_value <- restructure_variable(r_value)
matlab_value <- restructure_variable(matlab_value)
# Check if the lengths are the same
expect_equal(length(r_value), length(matlab_value),
info = paste("Length mismatch for variable:", var))
# Check if the values are approximately equal
expect_equal(r_value, matlab_value, tolerance = tolerance,
info = paste("Value mismatch for variable:", var))
}
}
# Compare results
test_matlab_equality(r_result, matlab_data)
# Test function
test_matlab_equality <- function(r_result, matlab_data, tolerance = 1e-2) {
# browser()
common_vars <- intersect(names(r_result), names(matlab_data))
for (var in common_vars) {
r_value <- r_result[[var]]
matlab_value <- matlab_data[[var]]
# Convert to vector if it's a single-column data frame
restructure_variable <- function(var) {
if (is.data.frame(var) && ncol(var) == 1) {
# If the variable is a data frame with 1 column, extract the vector
var <- var[[1]]
}
if (is.matrix(var) && ncol(var) == 1) {
# If the variable is a matrix with 1 column, convert to a vector
var <- as.numeric(var)
}
if (is.array(var) && length(dim(var)) == 2 && dim(var)[2] == 1) {
# If the variable is a 2D array with 1 column, convert to a vector
var <- as.numeric(var)
}
return(var)
}
# Restructure r_value and matlab_value
r_value <- restructure_variable(r_value)
matlab_value <- restructure_variable(matlab_value)
# Check if the lengths are the same
expect_equal(length(r_value), length(matlab_value),
info = paste("Length mismatch for variable:", var))
# Check if the values are approximately equal
expect_equal(r_value, matlab_value, tolerance = tolerance,
info = paste("Value mismatch for variable:", var))
}
}
# Compare results
test_matlab_equality(r_result, matlab_data)
devtools::test()
remove.packages("contdid")
devtools::clean_dll()
devtools::install()
devtools::test()
