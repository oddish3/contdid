})
results_mell <- lapply(dep_vars, function(dv) {
sapply(control_sets, function(cs) run_reg_set(dv, "mell", cs, data))
})
format_results <- function(results_list, malaria_var) {
formatted <- lapply(seq_along(results_list), function(i) {
dv <- dep_vars[i]
res <- results_list[[i]]
data.frame(
"Dependent.Variable" = rep(dv, ncol(res)),
"Controls" = colnames(res),
"Coefficient" = sprintf("%.3f%s", res["coef",], res["stars",]),
"SE" = sprintf("(%.3f)", res["se",])
)
})
do.call(rbind, formatted)
}
# Use the function
table_poveda <- format_results(results_poveda, "poveda")
table_mell <- format_results(results_mell, "mell")
# Merge the datasets
merged_table <- full_join(table_poveda, table_mell,
by = c("Dependent.Variable", "Controls"),
suffix = c("_Poveda", "_Mellinger"))
# Merge the datasets
merged_table <- full_join(table_poveda, table_mell,
by = c("Dependent.Variable", "Controls"),
suffix = c("_Poveda", "_Mellinger"))
# Reshape the data
reshaped_data <- merged_table %>%
pivot_wider(
id_cols = Controls,
names_from = Dependent.Variable,
values_from = c(Coefficient_Poveda, SE_Poveda, Coefficient_Mellinger, SE_Mellinger),
names_sep = "_"
) %>%
select(
Controls,
Literacy_Poveda = Coefficient_Poveda_dlit,
Literacy_SE_Poveda = SE_Poveda_dlit,
Schooling_Poveda = Coefficient_Poveda_dsch,
Schooling_SE_Poveda = SE_Poveda_dsch,
Income_Poveda = Coefficient_Poveda_dscore,
Income_SE_Poveda = SE_Poveda_dscore,
Literacy_Mellinger = Coefficient_Mellinger_dlit,
Literacy_SE_Mellinger = SE_Mellinger_dlit,
Schooling_Mellinger = Coefficient_Mellinger_dsch,
Schooling_SE_Mellinger = SE_Mellinger_dsch,
Income_Mellinger = Coefficient_Mellinger_dscore,
Income_SE_Mellinger = SE_Mellinger_dscore
)
# Combine coefficient and SE columns
combine_coef_se <- function(coef, se) {
paste0(coef, "\n", se)
}
reshaped_data_combined <- reshaped_data %>%
mutate(
Literacy_Poveda = combine_coef_se(Literacy_Poveda, Literacy_SE_Poveda),
Schooling_Poveda = combine_coef_se(Schooling_Poveda, Schooling_SE_Poveda),
Income_Poveda = combine_coef_se(Income_Poveda, Income_SE_Poveda),
Literacy_Mellinger = combine_coef_se(Literacy_Mellinger, Literacy_SE_Mellinger),
Schooling_Mellinger = combine_coef_se(Schooling_Mellinger, Schooling_SE_Mellinger),
Income_Mellinger = combine_coef_se(Income_Mellinger, Income_SE_Mellinger)
) %>%
select(Controls,
Literacy_Poveda, Schooling_Poveda, Income_Poveda,
Literacy_Mellinger, Schooling_Mellinger, Income_Mellinger)
# Create LaTeX table
latex_table <- reshaped_data_combined %>%
kbl(format = "latex",
booktabs = TRUE,
caption = "Malaria ecology studies comparison",
col.names = c("Controls",
"Literacy", "Years of schooling", "Income index",
"Literacy", "Years of schooling", "Income index"),
align = c("l", rep("c", 6))) %>%
kable_styling(latex_options = c("scale_down", "hold_position")) %>%
add_header_above(c(" " = 1,
"Malaria ecology (Poveda)" = 3,
"Malaria ecology (Mellinger)" = 3))
# Print the LaTeX table
# cat(latex_table)
# Basic specification for literacy, using Poveda measure
# Fit the model directly with additional components using grep
model <- feols(dscore~mell,
data = data, weights = ~wtbpl, vcov = "HC1")
# Print out the model summary
summary(model)
# summary(data$poveda)
# summary(data$mell)
data$poveda <- ifelse(data$poveda > 1, 1, data$poveda)
data$mell <- ifelse(data$mell > 1, 1, data$mell)
data <- data %>% filter(!is.na(poveda & dsch) & poveda < 1)
perform_analysis <- function(dose_var, dep_var, final_data) {
cont_twfe_weights <- function(l, D) {
wt <- ( ( mean(D[D >= l]) - mean(D) ) * mean(1 * (D >= l)) ) / var(D)
wt
}
dose <- final_data[[dose_var]]
dy <- final_data[[dep_var]]
dL <- min(dose[dose > 0])
dU <- max(dose)
# Create dose grid
dose_grid <- seq(dL, dU, length.out = 100)
# Density plot of the dose
dose_density_plot <- ggplot(data.frame(dose = dose[dose > 0]), aes(x = dose)) +
geom_density(colour = "darkblue", linewidth = 1.2, fill = "lightblue", alpha = 0.4) +
geom_vline(xintercept = mean(dose), colour = "red", linewidth = 1, linetype = "dashed") +
xlim(c(min(dose_grid), max(dose_grid))) +
ylab("Density") +
xlab("Dose (Malaria Index)") +
ylim(c(0, 3)) +
labs(title = paste("Density of ", dose_var), subtitle = "Red line indicates mean dose level") +
theme_minimal()
# Calculate TWFE weights
twfe_weights <- sapply(dose_grid, cont_twfe_weights, D = dose)
mean_weight <- mean(twfe_weights)
# Create dataframe for plotting
plot_df <- data.frame(dose_grid = dose_grid, twfe_weights = twfe_weights)
# TWFE weights plot
twfe_weights_plot <- ggplot(data = plot_df, aes(x = dose_grid, y = twfe_weights)) +
geom_line(colour = "darkblue", linewidth = 1.2) +
xlim(c(min(dose_grid), max(dose_grid))) +
ylab("TWFE Weights") +
xlab("Dose (Malaria Index)") +
geom_vline(xintercept = mean(twfe_weights), colour = "red", linewidth = 1, linetype = "dashed") +
ylim(c(0, max(twfe_weights) + 0.5)) +
labs(title = paste("TWFE Weights for ", dose_var), subtitle = "Red line indicates mean weight level") +
theme_minimal()
# Combine plots (can be commented out if not needed)
green_twfe <- grid.arrange(dose_density_plot, twfe_weights_plot, ncol = 2)
# Perform npiv_regression
res <- npiv_regression(treatment_col = dose_var, outcome_col = dep_var, data = final_data)
# Prepare data for ATT and ACR plots
att_df <- data.frame(
dose = res[["Xx"]],
att = res[["hhat"]],
upper = res[["ATT_upper_UCB"]],
lower = res[["ATT_lower_UCB"]],
se = res[["sigh"]]
)
acr_df <- data.frame(
dose = res[["Xx"]],
acr = res[["dhat"]],
upper = res[["ACR_upper_UCB"]],
lower = res[["ACR_lower_UCB"]],
se = res[["sigd"]]
)
att_df$ci_lower <- att_df$att - 1.96 * att_df$se
att_df$ci_upper <- att_df$att + 1.96 * att_df$se
acr_df$ci_lower <- acr_df$acr - 1.96 * acr_df$se
acr_df$ci_upper <- acr_df$acr + 1.96 * acr_df$se
# Function to create a clean, minimalist plot
create_clean_plot <- function(data, y_var, y_label) {
ggplot(data, aes(x = dose)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "#66C2A4", alpha = 0.2) +
geom_ribbon(aes(ymin = !!sym(y_var) - 1.96 * se, ymax = !!sym(y_var) + 1.96 * se),
fill = "#2B8C6B", alpha = 0.3) +
geom_line(aes(y = !!sym(y_var)), color = "#007358", linewidth = 1) +
geom_hline(yintercept = 0, linetype = "dotted", color = "gray30", linewidth = 0.5) +
scale_x_continuous(expand = c(0.01, 0), limits = c(0, 1)) +
scale_y_continuous(expand = c(0.01, 0)) +
labs(x = "Dose (Malaria Index)", y = y_label) +
theme_minimal() +
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA),
panel.grid = element_blank(),
axis.line = element_line(color = "black", linewidth = 0.5),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10, color = "black"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 20, unit = "pt"),
legend.position = "none"
)
}
# Create ATT and ACR plots
att_plot <- create_clean_plot(att_df, "att", "Average Treatment Effect on\nChange in Dependent Variable")
acr_plot <- create_clean_plot(acr_df, "acr", "Average Causal Response on\nChange in Dependent Variable")
# Find significant dose levels
significant_ci <- att_df %>%
dplyr::filter(ci_lower > 0 | ci_upper < 0)
significant_ucb <- att_df %>%
dplyr::filter(lower > 0 | upper < 0)
significant_ci_dose_levels <- significant_ci$dose
significant_ucb_dose_levels <- significant_ucb$dose
significant_ci_ranges <- find_ranges(significant_ci_dose_levels)
significant_ucb_ranges <- find_ranges(significant_ucb_dose_levels)
# Repeat for ACR
significant_ci_acr <- acr_df %>%
dplyr::filter(ci_lower > 0 | ci_upper < 0)
significant_ucb_acr <- acr_df %>%
dplyr::filter(lower > 0 | upper < 0)
significant_ci_dose_levels_acr <- significant_ci_acr$dose
significant_ucb_dose_levels_acr <- significant_ucb_acr$dose
significant_ci_ranges_acr <- find_ranges(significant_ci_dose_levels_acr)
significant_ucb_ranges_acr <- find_ranges(significant_ucb_dose_levels_acr)
# Return the results as a list for inspection
list(
dose_twfe_plot = green_twfe,
att_plot = att_plot,
acr_plot = acr_plot,
significant_ci_ranges = significant_ci_ranges,
significant_ucb_ranges = significant_ucb_ranges,
significant_ci_ranges_acr = significant_ci_ranges_acr,
significant_ucb_ranges_acr = significant_ucb_ranges_acr,
res = res["summary"]
)
}
find_ranges <- function(dose_levels, gap = 0.01) {
dose_levels <- sort(dose_levels)
split_points <- c(0, which(diff(dose_levels) > gap), length(dose_levels))
ranges <- lapply(seq_along(split_points[-1]), function(i) {
range_start <- split_points[i] + 1
range_end <- split_points[i + 1]
range(dose_levels[range_start:range_end])
})
ranges
}
# Example usage:
dep_vars <- c("dlit", "dsch", "dscore")
dose_vars <- c("poveda", "mell")
results <- list()
for (dep_var in dep_vars) {
for (dose_var in dose_vars) {
result_key <- paste0(dose_var, "_", dep_var)
results[[result_key]] <- perform_analysis(dose_var, dep_var, data)
}
}
View(results)
results[["poveda_dlit"]][["att_plot"]]
results[["poveda_dlit"]][["acr_plot"]]
results[["poveda_dlit"]][["significant_ci_ranges"]]
results[["poveda_dlit"]][["significant_ucb_ranges"]]
results[["poveda_dlit"]][["significant_ci_ranges_acr"]]
results[["poveda_dlit"]][["significant_ucb_ranges_acr"]]
results[["poveda_dlit"]][["res"]]
results[["poveda_dlit"]][["significant_ci_ranges"]]
results[["poveda_dlit"]][["res"]]
Sys.getenv("SHELL")
rm(list=ls())
# Load necessary libraries
library(dplyr)
library(fixest)
library(broom)
library(haven)
library(tidyverse)
library(knitr)
library(modelsummary)
library(kableExtra)
library(gridExtra)
library(contdid)
data <- read_dta("application/dataverse_files/Data Files/county_gb_main.dta")
# sort(unique(data$year))
# exploratory data analysis
dd <- data %>% filter(year >=1947& a_killed_w <1) %>% select(a_killed_w, year, county_code)
# plot(dd$a_killed_w)
sort(unique(dd$a_killed_w_after))
# Define county controls
county_controls <- c(
"shr_farmland", "pop_b_1940", "pop_w_1940", "postal_b", "mig_bw_state_b",
"mig_wi_state_b", "confed_symbol_N", "lynch_black", "naacp_chptrs1941",
"dissimilarity_po", "isolation_po", "alpha_po", "none_b", "educ_lo_1940_b",
"educ_hs_1940_b", "none_w", "educ_lo_1940_w", "educ_hs_1940_w", "hotel_own_w",
"hotel_own_b", "eating_own_w", "eating_own_b", "lforce_w", "lforce_b",
"incwage_w", "incwage_b", "own_w_1940", "own_b_1940", "man_estab_1940",
"man_worker_1940", "man_wages_1940", "man_output_1940", "man_vadd_1940",
"warsup_com_1940", "warsup_oth_1940", "warfac_ind_1940", "warfac_mil_1940",
"war_total_1940"
)
# Define missing controls
county_controls_missing <- c(
"shr_farmland_miss", "pop_b_1940_miss", "pop_w_1940_miss",
"mig_bw_state_b_miss", "mig_wi_state_b_miss", "confed_symbol_N_miss",
"lynch_black_miss", "dissimilarity_po_miss", "isolation_po_miss",
"alpha_po_miss", "none_b_miss", "educ_lo_1940_b_miss", "educ_hs_1940_b_miss",
"none_w_miss", "educ_lo_1940_w_miss", "educ_hs_1940_w_miss", "own_w_1940_miss",
"own_b_1940_miss", "man_estab_1940_miss", "man_worker_1940_miss",
"man_wages_1940_miss", "man_output_1940_miss", "man_vadd_1940_miss",
"war_total_1940_miss", "warsup_com_1940_miss", "warsup_oth_1940_miss",
"warfac_ind_1940_miss", "warfac_mil_1940_miss"
)
# Create asinh transformed variables
for (var in county_controls) {
data[[paste0("asinh_", var)]] <- asinh(data[[var]])
}
# Create interaction terms
for (var in county_controls) {
data[[paste0("postint_", var)]] <- data[[paste0("asinh_", var)]] * data$after
}
# Create missing indicator interactions
for (var in county_controls_missing) {
data[[paste0("mis_", var)]] <- data[[var]] * data$after
}
# Create misscontrols indicator
data$misscontrols <- as.numeric(rowSums(data[county_controls_missing] == 1) > 0)
# Panel A: Full Sample
# remove data where a_gb_tot is na
# Column 1: Basic DiD without fixed effects
model1 <- feols(a_gb_tot ~ a_killed_w + a_killed_w_after + after,
data = data, cluster = "county_code")
summary(model1)
# Column 2: DiD with state fixed effects
model2 <- feols(a_gb_tot ~ a_killed_w + a_killed_w_after + after | stateid,
data = data, cluster = "county_code")
# Column 3: DiD with county controls, year FE, and state FE
controls <- paste(c(paste0("postint_", county_controls),
paste0("mis_", county_controls_missing),
paste0("asinh_", county_controls),
county_controls_missing),
collapse = " + ")
formula3 <- as.formula(paste("a_gb_tot ~ a_killed_w + a_killed_w_after +", controls, "| year + stateid"))
model3 <- feols(formula3, data = data, cluster = "county_code")
# Column 4: DiD with county FE and year FE
model4 <- feols(a_gb_tot ~ a_killed_w_after | county_code + year,
data = data, cluster = "county_code")
# Column 5: DiD with county FE and state-by-year FE
model5 <- feols(a_gb_tot ~ a_killed_w_after | county_code + stateid^year,
data = data, cluster = "county_code")
# Column 6: County-level linear time trends, county FE, year FE
model6 <- feols(a_gb_tot ~ a_killed_w_after + i(year) + year[county_code],
data = data,
cluster = "county_code")
# Update the models list
models <- list(model1, model2, model3, model4, model5, model6)
library(modelsummary)
# Prepare the list of models
model_list <- list(model1, model2, model3, model4, model5, model6)
# Generate the regression table
regression_table <- modelsummary(model_list,
estimate = "{estimate}{stars}",
statistic = "({std.error})",
coef_map = c("a_killed_w_after" = "Coefficient of a_killed_w_after"),
gof_omit = "AIC|BIC|Log.Lik",
output = "latex"
)
# Print LaTeX code
# cat(regression_table)
######
# models <- list(
#   "Basic DiD" = model1,
#   "State FE" = model2,
#   "Controls + State & Year FE" = model3,
#   "County & Year FE" = model4,
#   "County & State-by-Year FE" = model5,
#   "County-Trends + County & Year FE" = model6
# )
# ES
# Run the regression
# model <- feols(a_gb_tot ~ taumin3_a_killed_w + taumin2_a_killed_w +
#                  taupos1_a_killed_w + taupos2_a_killed_w + taupos3_a_killed_w +
#                  taupos4_a_killed_w + taupos5_a_killed_w + taupos6_a_killed_w +
#                  taupos7_a_killed_w + taupos8_a_killed_w + taupos9_a_killed_w |
#                  county_code + year,
#                data = data,
#                cluster = "county_code")
#
# # Extract coefficients and confidence intervals
# results <- tidy(model, conf.int = TRUE) %>%
#   filter(grepl("tau", term))
#
# # Add year information
# results <- results %>%
#   mutate(year = case_when(
#     term == "taumin3_a_killed_w" ~ 1939,
#     term == "taumin2_a_killed_w" ~ 1940,
#     term == "taupos1_a_killed_w" ~ 1947,
#     term == "taupos2_a_killed_w" ~ 1948,
#     term == "taupos3_a_killed_w" ~ 1949,
#     term == "taupos4_a_killed_w" ~ 1950,
#     term == "taupos5_a_killed_w" ~ 1951,
#     term == "taupos6_a_killed_w" ~ 1952,
#     term == "taupos7_a_killed_w" ~ 1953,
#     term == "taupos8_a_killed_w" ~ 1954,
#     term == "taupos9_a_killed_w" ~ 1955
#   ))
#
# # Add the reference year (1941)
# results <- rbind(results, data.frame(
#   term = "reference",
#   estimate = 0,
#   std.error = 0,
#   statistic = 0,
#   p.value = 1,
#   conf.low = 0,
#   conf.high = 0,
#   year = 1941
# ))
#
# # Create the plot
# p <- ggplot(results, aes(x = year, y = estimate)) +
#   geom_point(color = "black", shape = 15, size = 3) +
#   geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
#   geom_hline(yintercept = 0, linetype = "dashed") +
#   geom_vline(xintercept = 1941, linetype = "solid") +
#   geom_rect(aes(xmin = 1942, xmax = 1946, ymin = -Inf, ymax = Inf),
#             fill = "grey90", alpha = 0.5) +
#   theme_minimal() +
#   labs(x = "Year", y = "Estimate") +
#   theme(legend.position = "none")
# print(p)
# ------------------------------------------------------------
# my did cont
# Step 1: Calculate average for variables with and without 'a_' prefix by period
average_totals <- data %>%
mutate(period = case_when(
year < 1942 ~ "before_1942",
year > 1945 ~ "after_1945",
TRUE ~ NA_character_
)) %>%
filter(!is.na(period)) %>%
group_by(county_code, period) %>%
summarise(
avg_a_gb_tot = mean(a_gb_tot, na.rm = TRUE),
avg_gb_tot = mean(gb_tot, na.rm = TRUE)
) %>%
ungroup()
# Step 2: Calculate the change in averages between pre-1942 and post-1945 for each county_code
change_in_a_gb_tot <- average_totals %>%
select(county_code, period, avg_a_gb_tot) %>%
spread(key = period, value = avg_a_gb_tot) %>%
mutate(change_a_gb_tot = after_1945 - before_1942) %>%
select(county_code, change_a_gb_tot)
# Spread avg_gb_tot next
change_in_gb_tot <- average_totals %>%
select(county_code, period, avg_gb_tot) %>%
spread(key = period, value = avg_gb_tot) %>%
mutate(change_gb_tot = after_1945 - before_1942) %>%
select(county_code, change_gb_tot)
# Merge the two change datasets together
change_in_totals <- change_in_a_gb_tot %>%
inner_join(change_in_gb_tot, by = "county_code")
# Step 3: Extract one unique value for variables with and without 'a_' prefix per county_code
killed_unique <- data %>%
group_by(county_code) %>%
summarise(
a_killed_w = first(a_killed_w),
killed_w = first(killed_w)
) %>%
ungroup()
# Step 4: Merge the changes in gb_tot with killed_w for both variables with and without 'a_' prefix
final_data <- change_in_totals %>%
inner_join(killed_unique, by = "county_code")
# Step 5: Run the regression of the change in gb_tot on a_killed_w
regression_result <- lm(change_a_gb_tot ~ a_killed_w, data = final_data)
summary(regression_result)
final_data$binary <- ifelse(final_data$a_killed_w > 0, 1, 0)
regression_result_binary <- lm(change_a_gb_tot ~ binary, data = final_data)
summary(regression_result_binary)
mean_a_killed_w <- mean(final_data$a_killed_w, na.rm = TRUE)
mean_change <- mean(final_data$change_a_gb_tot, na.rm = TRUE)
increase_killed_w <- 0.10 * mean_a_killed_w
increase_change <- 0.0065 * mean_change
ratio <- increase_change / increase_killed_w
regression_result <- lm(change_gb_tot ~ a_killed_w, data = final_data)
summary(regression_result)
final_data$binary <- ifelse(final_data$a_killed_w > 0, 1, 0)
regression_result_binary <- lm(change_gb_tot ~ binary, data = final_data)
summary(regression_result_binary)
transform_killed_w <- function(x) {
if (min(x) == max(x)) return(x)  # Handle the case where all values are the same
(x - min(x)) / (max(x) - min(x))
}
final_data$killed_w_transformed <- transform_killed_w(final_data$killed_w)
regression_result <- lm(change_gb_tot ~ killed_w_transformed, data = final_data)
summary(regression_result)
final_data$binary <- ifelse(final_data$killed_w_transformed > 0, 1, 0)
regression_result_binary <- lm(change_gb_tot ~ binary, data = final_data)
summary(regression_result_binary)
# Define the cont_twfe_weights function
cont_twfe_weights <- function(l, D) {
wt <- ( ( mean(D[D>=l]) - mean(D) ) * mean(1*(D>=l)) ) / var(D)
wt
}
# Prepare the data
dose <- final_data$killed_w_transformed
dy <- final_data$change_gb_tot
dL <- min(dose[dose>0])
dU <- max(dose)
# Create dose grid
dose_grid <- seq(dL, dU, length.out=100)
# Density plot of the dose
dose_density_plot <-ggplot(data.frame(dose=dose[dose>0]), aes(x=dose)) +
geom_density(colour = "darkblue", linewidth = 1.2, fill = "lightblue", alpha = 0.4) +
geom_vline(xintercept = mean(dose), colour="red", linewidth = 1, linetype = "dashed") +
xlim(c(min(dose_grid), max(dose_grid))) +
ylab("Density") +
xlab("Dose (Casualties)") +
ylim(c(0,3)) +
labs(title="Density of Normalised Casualties", subtitle="Red line indicates mean dose level") +
theme_minimal()
# Calculate TWFE weights
twfe_weights <- sapply(dose_grid, cont_twfe_weights, D=dose)
mean_weight <- mean(twfe_weights)
# Create dataframe for plotting
plot_df <- data.frame(dose_grid = dose_grid, twfe_weights = twfe_weights)
# TWFE weights plot
twfe_weights_plot <- ggplot(data=plot_df, aes(x = dose_grid, y = twfe_weights)) +
geom_line(colour = "darkblue", linewidth = 1.2) +
xlim(c(min(dose_grid), max(dose_grid))) +
ylab("TWFE Weights") +
xlab("Dose (Casualties)") +
geom_vline(xintercept = mean(twfe_weights), colour="red", linewidth = 1, linetype = "dashed") +
ylim(c(0, max(twfe_weights) + 0.5)) +
labs(title="TWFE Weights for Normalised White Casualties", subtitle="Red line indicates mean weight level") +
theme_minimal()
green_twfe <- grid.arrange(dose_density_plot, twfe_weights_plot, ncol=2)
# ggsave("/home/oddish3/Documents/uni/master-dissertation/diss/figures/green_twfe.png", green_twfe, width=12, height=6, units="in", dpi=300)
res <- npiv_regression(treatment_col = "killed_w_transformed",
outcome_col = "change_gb_tot", data = final_data)
remove.packages(contdid)
remove.packages("contdid")
devtools::install()
