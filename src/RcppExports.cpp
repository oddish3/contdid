// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bspline
List bspline(NumericVector x, int l, int r);
RcppExport SEXP _contdid_bspline(SEXP xSEXP, SEXP lSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(bspline(x, l, r));
    return rcpp_result_gen;
END_RCPP
}
// jhat
Rcpp::List jhat(const arma::mat& PP, const arma::mat& BB, const arma::vec& CJ, const arma::vec& CK, const arma::vec& TJ, double M, int n, int nL);
RcppExport SEXP _contdid_jhat(SEXP PPSEXP, SEXP BBSEXP, SEXP CJSEXP, SEXP CKSEXP, SEXP TJSEXP, SEXP MSEXP, SEXP nSEXP, SEXP nLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type PP(PPSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type BB(BBSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CJ(CJSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CK(CKSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type TJ(TJSEXP);
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type nL(nLSEXP);
    rcpp_result_gen = Rcpp::wrap(jhat(PP, BB, CJ, CK, TJ, M, n, nL));
    return rcpp_result_gen;
END_RCPP
}
// npivq
Rcpp::List npivq(const arma::mat& P, const arma::mat& B, const arma::vec& y);
RcppExport SEXP _contdid_npivq(SEXP PSEXP, SEXP BSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(npivq(P, B, y));
    return rcpp_result_gen;
END_RCPP
}
// jlep
Rcpp::List jlep(arma::uword Lhat, const arma::mat& Px, const arma::mat& PP, const arma::mat& BB, const arma::uvec& CJ, const arma::uvec& CK, const arma::vec& TJ, const arma::vec& y, arma::uword n, arma::uword nb);
RcppExport SEXP _contdid_jlep(SEXP LhatSEXP, SEXP PxSEXP, SEXP PPSEXP, SEXP BBSEXP, SEXP CJSEXP, SEXP CKSEXP, SEXP TJSEXP, SEXP ySEXP, SEXP nSEXP, SEXP nbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type Lhat(LhatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Px(PxSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type PP(PPSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type BB(BBSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type CJ(CJSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type CK(CKSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type TJ(TJSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type nb(nbSEXP);
    rcpp_result_gen = Rcpp::wrap(jlep(Lhat, Px, PP, BB, CJ, CK, TJ, y, n, nb));
    return rcpp_result_gen;
END_RCPP
}
// npiv
Rcpp::List npiv(const arma::mat& P, const arma::mat& B, const arma::vec& y);
RcppExport SEXP _contdid_npiv(SEXP PSEXP, SEXP BSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(npiv(P, B, y));
    return rcpp_result_gen;
END_RCPP
}
// npiv_estimate_cpp
Rcpp::List npiv_estimate_cpp(arma::uword Ltil, const arma::mat& Px, const arma::mat& PP, const arma::mat& BB, const arma::uvec& CJ, const arma::uvec& CK, const arma::vec& y, arma::uword n);
RcppExport SEXP _contdid_npiv_estimate_cpp(SEXP LtilSEXP, SEXP PxSEXP, SEXP PPSEXP, SEXP BBSEXP, SEXP CJSEXP, SEXP CKSEXP, SEXP ySEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type Ltil(LtilSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Px(PxSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type PP(PPSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type BB(BBSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type CJ(CJSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type CK(CKSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(npiv_estimate_cpp(Ltil, Px, PP, BB, CJ, CK, y, n));
    return rcpp_result_gen;
END_RCPP
}
// shat
double shat(const arma::mat& P, const arma::mat& B);
RcppExport SEXP _contdid_shat(SEXP PSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(shat(P, B));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_contdid_bspline", (DL_FUNC) &_contdid_bspline, 3},
    {"_contdid_jhat", (DL_FUNC) &_contdid_jhat, 8},
    {"_contdid_npivq", (DL_FUNC) &_contdid_npivq, 3},
    {"_contdid_jlep", (DL_FUNC) &_contdid_jlep, 10},
    {"_contdid_npiv", (DL_FUNC) &_contdid_npiv, 3},
    {"_contdid_npiv_estimate_cpp", (DL_FUNC) &_contdid_npiv_estimate_cpp, 8},
    {"_contdid_shat", (DL_FUNC) &_contdid_shat, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_contdid(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
